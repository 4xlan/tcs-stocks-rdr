// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/tcsrdrserver/orderbook_response_struct.go

// Package tcsrdrserver is a generated GoMock package.
package tcsrdrserver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTCSPriceData is a mock of TCSPriceData interface.
type MockTCSPriceData struct {
	ctrl     *gomock.Controller
	recorder *MockTCSPriceDataMockRecorder
}

// MockTCSPriceDataMockRecorder is the mock recorder for MockTCSPriceData.
type MockTCSPriceDataMockRecorder struct {
	mock *MockTCSPriceData
}

// NewMockTCSPriceData creates a new mock instance.
func NewMockTCSPriceData(ctrl *gomock.Controller) *MockTCSPriceData {
	mock := &MockTCSPriceData{ctrl: ctrl}
	mock.recorder = &MockTCSPriceDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCSPriceData) EXPECT() *MockTCSPriceDataMockRecorder {
	return m.recorder
}

// getLastPrice mocks base method.
func (m *MockTCSPriceData) getLastPrice(figi *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "getLastPrice", figi)
}

// getLastPrice indicates an expected call of getLastPrice.
func (mr *MockTCSPriceDataMockRecorder) getLastPrice(figi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLastPrice", reflect.TypeOf((*MockTCSPriceData)(nil).getLastPrice), figi)
}
